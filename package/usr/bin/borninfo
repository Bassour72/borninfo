#!/bin/bash

# Global variable for --msg option
SHOW_MSG=false

# Function to check if a command is available
check_command() {
    command -v "/usr/bin/$1" >/dev/null 2>&1 || { echo "$1 command not found. Skipping..."; return 1; }
    return 0
}

# Function to output based on --msg flag
output() {
    if $SHOW_MSG; then
        echo "$2"  # Show the message with the label
    else
        echo "$1"  # Show only the value without the label
    fi
}

# Function to print architecture
print_architecture() {
    arch_output=$(/usr/bin/uname -a)
    output "$arch_output" "# Architecture: $arch_output"
}

# Function to print physical CPUs
print_cpu_physical() {
    if check_command lscpu; then
        cpu_physical=$(/usr/bin/lscpu | awk '/Socket/{print $2}')
        output "$cpu_physical" "# CPU physical: $cpu_physical"
    fi
}

# Function to print virtual CPUs
print_vcpu() {
    vcpu=$(/usr/bin/nproc)
    output "$vcpu" "# vCPU: $vcpu"
}

# Function to print memory usage
print_memory() {
    if check_command free; then
        memory_usage=$(/usr/bin/free --mega | awk '/Mem/{printf("%d/%dMB (%.2f%%)", $3, $2, ($3 / $2) * 100)}')
        output "$memory_usage" "# Memory Usage: $memory_usage"
    fi
}

# Function to print disk usage
print_disk() {
    if check_command df; then
        disk_usage=$(/usr/bin/df -m --total | awk '/total/{printf "%d/%dGb (%s)\n", $3, $2/1024 ,$5}')
        output "$disk_usage" "# Disk Usage: $disk_usage"
    fi
}

# Function to print CPU load
print_cpu_load() {
    if check_command sar; then
        cpu_load=$(/usr/bin/sar -u 1 1 | awk 'END{print 100 - $8}')
        output "$cpu_load%" "# CPU load: $cpu_load%"
    fi
}

# Function to print last boot time
print_last_boot() {
    if check_command who; then
        last_boot=$(/usr/bin/uptime -s | cut -d ':' -f1,2)
        output "$last_boot" "# Last boot: $last_boot"
    fi
}

# Function to check if LVM is in use
print_lvm() {
    if check_command lsblk; then
        lvm_use=$(/usr/bin/lsblk 2>/dev/null | grep -q 'lvm' && echo yes || echo no)
        output "$lvm_use" "# LVM use: $lvm_use"
    fi
}

# Function to print established TCP connections
print_tcp_connections() {
    if check_command netstat; then
        connections_tcp=$(/usr/bin/netstat -an | grep -c ESTAB)
        output "$connections_tcp ESTABLISHED" "# Connections TCP : $connections_tcp ESTABLISHED"
    fi
}

# Function to print number of logged-in users
print_user_log() {
    if check_command who; then
        user_log=$(who | wc -l)
        output "$user_log" "# User log: $user_log"
    fi
}

# Function to print network information (IP and MAC)
print_network() {
    network_ip=$(/usr/bin/hostname -I | cut -d ' ' -f1)
    network_mac=$(/usr/bin/ip link | awk 'END{print $2}')
    output "$network_ip ($network_mac)" "# Network: IP $network_ip ($network_mac)"
}

# Function to print number of sudo commands used
print_sudo_count() {
    if check_command journalctl; then
        sudo_count=$(/usr/bin/journalctl -q _COMM=sudo | grep -c COMMAND)
        output "$sudo_count cmd" "# Sudo: $sudo_count cmd"
    fi
}

# Function to print help message
print_help() {
    cat << EOF
Usage: borninfo [OPTIONS]

Options:
  -a, --all              Show all information
  -r, --architecture     Show system architecture
  -c, --cpu-physical     Show number of physical CPUs
  -v, --vcpu             Show number of virtual CPUs
  -m, --memory           Show memory usage
  -d, --disk             Show disk usage
  -l, --cpu-load         Show CPU load
  -b, --last-boot        Show last boot time
      --lvm              Show if LVM is in use
  -t, --tcp              Show established TCP connections
  -u, --user-log         Show number of logged-in users
  -n, --network          Show network information (IP and MAC)
  -s, --sudo             Show number of sudo commands used
      --msg              Show labels in output
  -h, --help             Display this help message
EOF
}

# Function to print all information
print_all() {
    print_architecture
    print_cpu_physical
    print_vcpu
    print_memory
    print_disk
    print_cpu_load
    print_last_boot
    print_lvm
    print_tcp_connections
    print_user_log
    print_network
    print_sudo_count
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -a|--all)
            ACTION="print_all"
            shift
            ;;
        -r|--architecture)
            ACTION="print_architecture"
            shift
            ;;
        -c|--cpu-physical)
            ACTION="print_cpu_physical"
            shift
            ;;
        -v|--vcpu)
            ACTION="print_vcpu"
            shift
            ;;
        -m|--memory)
            ACTION="print_memory"
            shift
            ;;
        -d|--disk)
            ACTION="print_disk"
            shift
            ;;
        -l|--cpu-load)
            ACTION="print_cpu_load"
            shift
            ;;
        -b|--last-boot)
            ACTION="print_last_boot"
            shift
            ;;
        --lvm)
            ACTION="print_lvm"
            shift
            ;;
        -t|--tcp)
            ACTION="print_tcp_connections"
            shift
            ;;
        -u|--user-log)
            ACTION="print_user_log"
            shift
            ;;
        -n|--network)
            ACTION="print_network"
            shift
            ;;
        -s|--sudo)
            ACTION="print_sudo_count"
            shift
            ;;
        --msg)
            SHOW_MSG=true
            shift
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        *)
            echo "Invalid option. Use -h or --help for usage information."
            exit 1
            ;;
    esac
done

# Execute the selected action
if [ -n "$ACTION" ]; then
    $ACTION
else
    echo "No action specified. Use -h or --help for usage information."
fi
